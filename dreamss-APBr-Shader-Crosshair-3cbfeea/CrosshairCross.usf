/***************************************************************************************/
/*! \file CrosshairCross.usf
* 
* Modular crosshair shape - Cross by Blizzie
* Requires Crosshair.usf, CrosshairSettings.usf
* 
* Please see the readme or CrosshairSettings.usf for settings to change
* You don't need to make changes to this file.
****************************************************************************************/
{
	int DRAW_CROSSHAIR_CROSS = 0;
	int DRAW_CROSSHAIR_CROSS_A = 0;
	int DRAW_CROSSHAIR_CROSS_B = 0;
// inner
    if (SceneUV.x >= (0.5 - CROSSHAIR_CROSS_SIZE + CROSSHAIR_CROSS_OFFSET_X) && SceneUV.x <= 0.5 - CROSSHAIR_CROSS_GAP + CROSSHAIR_CROSS_OFFSET_X && SceneUV.y >= 0.5 - (CROSSHAIR_CROSS_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio) && SceneUV.y <= 0.5 + (CROSSHAIR_CROSS_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio)) //left
    {
        DRAW_CROSSHAIR_CROSS_A = 1;
    }
    else if (SceneUV.x <= (0.5 + CROSSHAIR_CROSS_SIZE + CROSSHAIR_CROSS_OFFSET_X) && SceneUV.x >= 0.5 + CROSSHAIR_CROSS_GAP + CROSSHAIR_CROSS_OFFSET_X && SceneUV.y >= 0.5 - (CROSSHAIR_CROSS_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio) && SceneUV.y <= 0.5 + (CROSSHAIR_CROSS_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio)) // right
    {
        DRAW_CROSSHAIR_CROSS_A = 1;
    }
    else if (SceneUV.x >= 0.5 - CROSSHAIR_CROSS_THICKNESS + CROSSHAIR_CROSS_OFFSET_X && SceneUV.x <= 0.5 + CROSSHAIR_CROSS_THICKNESS + CROSSHAIR_CROSS_OFFSET_X && SceneUV.y >= (0.5 - (CROSSHAIR_CROSS_SIZE * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio)) && SceneUV.y <= 0.5 - (CROSSHAIR_CROSS_GAP * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio)) //up
    {
        DRAW_CROSSHAIR_CROSS_A = 1;
    }
    else if (SceneUV.x >= 0.5 - CROSSHAIR_CROSS_THICKNESS + CROSSHAIR_CROSS_OFFSET_X && SceneUV.x <= 0.5 + CROSSHAIR_CROSS_THICKNESS + CROSSHAIR_CROSS_OFFSET_X && SceneUV.y <= (0.5 + (CROSSHAIR_CROSS_SIZE * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio)) && SceneUV.y >= 0.5 + (CROSSHAIR_CROSS_GAP * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio)) //down
    {
        DRAW_CROSSHAIR_CROSS_A = 1;
    }
// border
    else if (SceneUV.x >= 0.5 - CROSSHAIR_CROSS_SIZE - CROSSHAIR_CROSS_BORDER_THICKNESS + CROSSHAIR_CROSS_OFFSET_X && SceneUV.x <= 0.5 - CROSSHAIR_CROSS_GAP + CROSSHAIR_CROSS_BORDER_THICKNESS + CROSSHAIR_CROSS_OFFSET_X && SceneUV.y >= 0.5 - (CROSSHAIR_CROSS_THICKNESS * aspectRatio) - (CROSSHAIR_CROSS_BORDER_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio) && SceneUV.y <= 0.5 + (CROSSHAIR_CROSS_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_BORDER_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio)) //left
    {
        DRAW_CROSSHAIR_CROSS_B = 1;
    }
    else if (SceneUV.x <= 0.5 + CROSSHAIR_CROSS_SIZE + CROSSHAIR_CROSS_BORDER_THICKNESS + CROSSHAIR_CROSS_OFFSET_X && SceneUV.x >= 0.5 + CROSSHAIR_CROSS_GAP - CROSSHAIR_CROSS_BORDER_THICKNESS + CROSSHAIR_CROSS_OFFSET_X && SceneUV.y >= 0.5 - (CROSSHAIR_CROSS_THICKNESS * aspectRatio) - (CROSSHAIR_CROSS_BORDER_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio) && SceneUV.y <= 0.5 + (CROSSHAIR_CROSS_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_BORDER_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio)) // right
    {
        DRAW_CROSSHAIR_CROSS_B = 1;
    }
    else if (SceneUV.x >= 0.5 - CROSSHAIR_CROSS_THICKNESS - CROSSHAIR_CROSS_BORDER_THICKNESS + CROSSHAIR_CROSS_OFFSET_X && SceneUV.x <= 0.5 + CROSSHAIR_CROSS_THICKNESS + CROSSHAIR_CROSS_BORDER_THICKNESS + CROSSHAIR_CROSS_OFFSET_X && SceneUV.y >= 0.5 - (CROSSHAIR_CROSS_SIZE * aspectRatio) - (CROSSHAIR_CROSS_BORDER_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio) && SceneUV.y <= 0.5 - (CROSSHAIR_CROSS_GAP * aspectRatio) + (CROSSHAIR_CROSS_BORDER_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio)) //up
    {
        DRAW_CROSSHAIR_CROSS_B = 1;
    }
    else if (SceneUV.x >= 0.5 - CROSSHAIR_CROSS_THICKNESS - CROSSHAIR_CROSS_BORDER_THICKNESS + CROSSHAIR_CROSS_OFFSET_X && SceneUV.x <= 0.5 + CROSSHAIR_CROSS_THICKNESS + CROSSHAIR_CROSS_BORDER_THICKNESS + CROSSHAIR_CROSS_OFFSET_X && SceneUV.y <= 0.5 + (CROSSHAIR_CROSS_SIZE * aspectRatio) + (CROSSHAIR_CROSS_BORDER_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio) && SceneUV.y >= 0.5 + (CROSSHAIR_CROSS_GAP * aspectRatio) - (CROSSHAIR_CROSS_BORDER_THICKNESS * aspectRatio) + (CROSSHAIR_CROSS_OFFSET_X * aspectRatio)) //down
    {
        DRAW_CROSSHAIR_CROSS_B = 1;
    }





// Border Color
    if (DRAW_CROSSHAIR_CROSS_B == 1) 
    {
        CROSSHAIR_PIXEL_DRAWN = 1;
        #if CROSSHAIR_CROSS_BORDER_DYNAMIC_COLOR
            OutColor.rgb = lerp(OutColor.rgb, float3(1.0,1.0,1.0) - OutColor.rgb, CROSSHAIR_CROSS_BORDER_COLOR.a);
        #else
            OutColor.rgb = lerp(OutColor.rgb, CROSSHAIR_CROSS_BORDER_COLOR.rgb, CROSSHAIR_CROSS_BORDER_COLOR.a);
        #endif
    }
// Inner Color
    else if (DRAW_CROSSHAIR_CROSS_A == 1) 
    {
        CROSSHAIR_PIXEL_DRAWN = 1;
        #if CROSSHAIR_CROSS_INNER_DYNAMIC_COLOR
            OutColor.rgb = lerp(OutColor.rgb, float3(1.0,1.0,1.0) - OutColor.rgb, CROSSHAIR_CROSS_INNER_COLOR.a);
        #else
            OutColor.rgb = lerp(OutColor.rgb, CROSSHAIR_CROSS_INNER_COLOR.rgb, CROSSHAIR_CROSS_INNER_COLOR.a);
        #endif
    }
}
